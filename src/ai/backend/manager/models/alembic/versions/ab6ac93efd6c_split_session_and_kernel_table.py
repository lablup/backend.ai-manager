"""split session and kernel table

Revision ID: ab6ac93efd6c
Revises: 81c264528f20
Create Date: 2022-05-24 15:27:18.773174

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from ai.backend.manager.models.base import (
    SessionIDColumnType, EnumType, GUID,
    ResourceSlotColumn, URLColumn,
)

# revision identifiers, used by Alembic.
revision = 'ab6ac93efd6c'
down_revision = '81c264528f20'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Session table
    op.create_table('sessions',
        sa.Column('id', SessionIDColumnType(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
        sa.Column('creation_id', sa.String(length=32), nullable=True),
        sa.Column('name', sa.String(length=64), nullable=True),
        sa.Column('session_type', EnumType('INTERACTIVE', 'BATCH'), server_default='INTERACTIVE', nullable=False),
        sa.Column('cluster_mode', sa.String(length=16), server_default='SINGLE_NODE', nullable=False),
        sa.Column('cluster_size', sa.Integer(), nullable=False),
        sa.Column('scaling_group', sa.String(length=64), nullable=True),
        sa.Column('domain_name', sa.String(length=64), nullable=False),
        sa.Column('group_id', GUID(), nullable=False),
        sa.Column('user_uuid', GUID(), nullable=False),
        sa.Column('access_key', sa.String(length=20), nullable=True),
        sa.Column('image', GUID(), nullable=True),
        sa.Column('tag', sa.String(length=64), nullable=True),
        sa.Column('occupying_slots', ResourceSlotColumn(), nullable=False),
        sa.Column('requested_slots', ResourceSlotColumn(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('terminated_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('starts_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('status', EnumType('PENDING', 'SCHEDULED', 'PREPARING', 'BUILDING', 'PULLING', 'RUNNING', 'RESTARTING', 'RESIZING', 'SUSPENDED', 'TERMINATING', 'TERMINATED', 'ERROR', 'CANCELLED'), server_default='PENDING', nullable=False),
        sa.Column('status_changed', sa.DateTime(timezone=True), nullable=True),
        sa.Column('status_info', sa.Unicode(), nullable=True),
        sa.Column('status_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('callback_url', URLColumn(), nullable=True),
        sa.Column('startup_command', sa.Text(), nullable=True),
        sa.Column('result', EnumType('UNDEFINED', 'SUCCESS', 'FAILURE'), server_default='UNDEFINED', nullable=False),
        sa.Column('num_queries', sa.BigInteger(), nullable=True),
        sa.Column('last_stat', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['access_key'], ['keypairs.access_key'], name=op.f('fk_sessions_access_key_keypairs')),
        sa.ForeignKeyConstraint(['domain_name'], ['domains.name'], name=op.f('fk_sessions_domain_name_domains')),
        sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name=op.f('fk_sessions_group_id_groups')),
        sa.ForeignKeyConstraint(['image'], ['images.id'], name=op.f('fk_sessions_image_images')),
        sa.ForeignKeyConstraint(['scaling_group'], ['scaling_groups.name'], name=op.f('fk_sessions_scaling_group_scaling_groups')),
        sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], name=op.f('fk_sessions_user_uuid_users')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_sessions'))
    )
    op.create_index(op.f('ix_sessions_created_at'), 'sessions', ['created_at'], unique=False)
    op.create_index(op.f('ix_sessions_name'), 'sessions', ['name'], unique=False)
    op.create_index(op.f('ix_sessions_result'), 'sessions', ['result'], unique=False)
    op.create_index(op.f('ix_sessions_scaling_group'), 'sessions', ['scaling_group'], unique=False)
    op.create_index(op.f('ix_sessions_session_type'), 'sessions', ['session_type'], unique=False)
    op.create_index(op.f('ix_sessions_status'), 'sessions', ['status'], unique=False)
    op.create_index(op.f('ix_sessions_status_changed'), 'sessions', ['status_changed'], unique=False)
    op.create_index(op.f('ix_sessions_terminated_at'), 'sessions', ['terminated_at'], unique=False)

    # Session dependency table
    op.create_foreign_key(op.f('fk_session_dependencies_session_id_sessions'), 'session_dependencies', 'sessions', ['session_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key(op.f('fk_session_dependencies_depends_on_sessions'), 'session_dependencies', 'sessions', ['depends_on'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint('fk_session_dependencies_depends_on_kernels', 'session_dependencies', type_='foreignkey')
    op.drop_constraint('fk_session_dependencies_session_id_kernels', 'session_dependencies', type_='foreignkey')

    # Kernel table
    op.create_foreign_key(op.f('fk_kernels_session_id_sessions'), 'kernels', 'sessions', ['session_id'], ['id'])
    op.drop_index('ix_kernels_sess_id_role', table_name='kernels')
    op.drop_index('ix_kernels_session_name', table_name='kernels')
    op.drop_index('ix_kernels_session_type', table_name='kernels')
    op.drop_index('ix_kernels_status_role', table_name='kernels')
    op.drop_index('ix_kernels_unique_sess_token', table_name='kernels')
    op.drop_column('kernels', 'session_type')
    op.drop_column('kernels', 'cluster_mode')
    op.drop_column('kernels', 'session_name')
    op.drop_column('kernels', 'cluster_size')
    op.drop_column('kernels', 'session_creation_id')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Kernel table
    op.add_column('kernels', sa.Column('session_creation_id', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
    op.add_column('kernels', sa.Column('cluster_size', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('kernels', sa.Column('session_name', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('kernels', sa.Column('cluster_mode', sa.VARCHAR(length=16), server_default=sa.text("'SINGLE_NODE'::character varying"), autoincrement=False, nullable=False))
    op.add_column('kernels', sa.Column('session_type', postgresql.ENUM('INTERACTIVE', 'BATCH', name='sessiontypes'), server_default=sa.text("'INTERACTIVE'::sessiontypes"), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('fk_kernels_session_id_sessions'), 'kernels', type_='foreignkey')
    op.create_index('ix_kernels_unique_sess_token', 'kernels', ['access_key', 'session_name'], unique=False)
    op.create_index('ix_kernels_status_role', 'kernels', ['status', 'cluster_role'], unique=False)
    op.create_index('ix_kernels_session_type', 'kernels', ['session_type'], unique=False)
    op.create_index('ix_kernels_session_name', 'kernels', ['session_name'], unique=False)
    op.create_index('ix_kernels_sess_id_role', 'kernels', ['session_id', 'cluster_role'], unique=False)

    # Session dependency table
    op.create_foreign_key('fk_session_dependencies_session_id_kernels', 'session_dependencies', 'kernels', ['session_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_session_dependencies_depends_on_kernels', 'session_dependencies', 'kernels', ['depends_on'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(op.f('fk_session_dependencies_depends_on_sessions'), 'session_dependencies', type_='foreignkey')
    op.drop_constraint(op.f('fk_session_dependencies_session_id_sessions'), 'session_dependencies', type_='foreignkey')

    # Session table
    op.drop_index(op.f('ix_sessions_terminated_at'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_status_changed'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_status'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_session_type'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_scaling_group'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_result'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_name'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_created_at'), table_name='sessions')
    op.drop_table('sessions')
    # ### end Alembic commands ###
